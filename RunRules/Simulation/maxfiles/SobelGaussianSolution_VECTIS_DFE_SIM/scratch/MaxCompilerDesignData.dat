#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "SobelGaussianSolution"
#define MAXFILE_BUILD_DIR  "/home/bkrosenz/ICM-1/RunRules/Simulation/maxfiles/SobelGaussianSolution_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20171221
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 39)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "SobelGaussianSolutionKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(SobelGaussianSolutionKernel, Kernel)
MANAGER_NODE(inImage, PCIe_From_Host_fwd)
MANAGER_NODE(outImage, PCIe_To_Host_fwd)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(SobelGaussianSolutionKernel, inImage, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(SobelGaussianSolutionKernel, outImage, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(inImage, inImage, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(outImage, outImage, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, STREAM, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(inImage, inImage, Stream_1, input, 128)
MANAGER_STREAM(SobelGaussianSolutionKernel, outImage, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, outImage, outImage, 128)
MANAGER_STREAM(Stream_10, output, SobelGaussianSolutionKernel, inImage, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(SobelGaussianSolutionKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(inImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(outImage, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(SobelGaussianSolutionKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(SobelGaussianSolutionKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(SobelGaussianSolutionKernel, SobelGaussianSolutionKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(SobelGaussianSolutionKernel, inImage, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(SobelGaussianSolutionKernel, outImage, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(inImage, PCIePullSourceSyncMax3, "inImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(SobelGaussianSolutionKernel, SobelGaussianSolutionKernel, "SobelGaussianSolutionKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(outImage, PCIePushSinkSyncMax3, "outImage")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 39)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "6c17b965656a0f47475bc92561e242248c84bde5e89269d2d9eddefd1f3ad6f1")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_fill_level, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_flush_level, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_flush_start_level, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_full_level, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(SobelGaussianSolutionKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(inImage, STREAM_FROM_HOST, 0)
PCIE_STREAM(outImage, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(SobelGaussianSolutionKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(SobelGaussianSolutionKernel.io_outImage_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(SobelGaussianSolutionKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(SobelGaussianSolutionKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(SobelGaussianSolutionKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_ctld_done, 0xf, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_ctld_empty, 0x10, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_ctld_read, 0x11, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3))
REG(SobelGaussianSolutionKernel.dbg_ctld_request, 0x13, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_done_out, 0x14, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_fill_level, 0x15, 2, hwBits(9))
REG(SobelGaussianSolutionKernel.dbg_flush_level, 0x17, 2, hwBits(9))
REG(SobelGaussianSolutionKernel.dbg_flush_start, 0x19, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_flush_start_level, 0x1a, 2, hwBits(9))
REG(SobelGaussianSolutionKernel.dbg_flushing, 0x1c, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_full_level, 0x1d, 2, hwBits(9))
REG(SobelGaussianSolutionKernel.dbg_out_stall, 0x1f, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_out_valid, 0x20, 1, hwBits(1))
REG(SobelGaussianSolutionKernel.dbg_stall_vector, 0x21, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(SobelGaussianSolutionKernel.io_inImage_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(SobelGaussianSolutionKernel.io_outImage_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(SobelGaussianSolutionKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_ctld_done, 0xf, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_ctld_empty, 0x10, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_ctld_read, 0x11, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_ctld_request, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_done_out, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_fill_level, 0x15, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_flush_level, 0x17, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_flush_start, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_flush_start_level, 0x1a, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_flushing, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_full_level, 0x1d, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_out_stall, 0x1f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_out_valid, 0x20, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SobelGaussianSolutionKernel.dbg_stall_vector, 0x21, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x22, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x23, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("6c17b965656a0f47475bc92561e242248c84bde5e89269d2d9eddefd1f3ad6f1")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME SobelGaussianSolution
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_SobelGaussianSolution_H
#define SLIC_DECLARATIONS_SobelGaussianSolution_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define SobelGaussianSolution_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] instream_inImage The stream should be of size (param_size * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_size * 4) bytes.
 */
void SobelGaussianSolution(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_size Interface Parameter "size".
 * \param [in] instream_inImage The stream should be of size (param_size * 4) bytes.
 * \param [out] outstream_outImage The stream should be of size (param_size * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *SobelGaussianSolution_nonblock(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int32_t param_size; /**<  [in] Interface Parameter "size". */
	const int32_t *instream_inImage; /**<  [in] The stream should be of size (param_size * 4) bytes. */
	int32_t *outstream_outImage; /**<  [out] The stream should be of size (param_size * 4) bytes. */
} SobelGaussianSolution_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void SobelGaussianSolution_run(
	max_engine_t *engine,
	SobelGaussianSolution_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussianSolution_run_nonblock(
	max_engine_t *engine,
	SobelGaussianSolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void SobelGaussianSolution_run_group(max_group_t *group, SobelGaussianSolution_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussianSolution_run_group_nonblock(max_group_t *group, SobelGaussianSolution_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void SobelGaussianSolution_run_array(max_engarray_t *engarray, SobelGaussianSolution_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussianSolution_run_array_nonblock(max_engarray_t *engarray, SobelGaussianSolution_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* SobelGaussianSolution_convert(max_file_t *maxfile, SobelGaussianSolution_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* SobelGaussianSolution_init(void);

/* Error handling functions */
int SobelGaussianSolution_has_errors(void);
const char* SobelGaussianSolution_get_errors(void);
void SobelGaussianSolution_clear_errors(void);
/* Free statically allocated maxfile data */
void SobelGaussianSolution_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int SobelGaussianSolution_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int SobelGaussianSolution_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_SobelGaussianSolution_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 94, NodeInputMappedReg, "Scalar input (io_outImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:94)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 95, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:94)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 75, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounterChainMoreBits(Count.java:472)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:87)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 141, NodeConstantRawBits, "{HWOffsetFix:10, 0, UNSIGNED}\n0x100; 256.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:89)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 79, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:89)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 140, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 81, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 139, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x0ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 83, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 84, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 138, NodeConstantRawBits, "{HWOffsetFix:10, 0, UNSIGNED}\n0x100; 256.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:88)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 77, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:504)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:88)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 137, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 86, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:799)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 136, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x0ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 88, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:845)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 89, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 90, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:530)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 91, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1173)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 0, NodeInputMappedReg, "Scalar input (io_inImage_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:35)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:35)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 2, NodeInput, "Input(inImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:35)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 122, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 130, NodeFIFO, "FIFO(250)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 131, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 55, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:82)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 110, NodeReinterpret, "<{HWOffsetFix:32, 2, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:973)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:82)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 111, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:973)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:82)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 112, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:973)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:82)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 5, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:41)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 7, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:42)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 8, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:42)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 12, NodeStreamOffset, "stream offset: 256", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:51)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 123, NodeFIFO, "FIFO(257)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 14, NodeStreamOffset, "stream offset: -256", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:225)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:52)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 124, NodeFIFO, "FIFO(255)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 15, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:52)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 17, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:876)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:56)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 113, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:993)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:82)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 114, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:993)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:82)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 60, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:82)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 129, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 135, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:957)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 62, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:957)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 63, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:968)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 115, NodeReinterpret, "<{HWOffsetFix:32, 2, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:973)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 116, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:973)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 117, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:973)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 128, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 134, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000008; 8.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:957)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 67, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:957)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 118, NodeReinterpret, "<{HWOffsetFix:32, 1, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:993)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 119, NodeCast, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:993)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 70, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:922)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:83)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 71, NodeLt, "<", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.lt(DFEVar.java:830)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:84)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 73, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1173)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:84)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 72, NodeConstantRawBits, "{HWOffsetFix:32, 0, TWOSCOMPLEMENT}\n0x000000ff; 255.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:96)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:84)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 74, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1173)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:84)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 92, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1173)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:91)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 97, NodeOutput, "Output(outImage)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\nsobelgaussian.SobelGaussianSolutionKernel.<init>(SobelGaussianSolutionKernel.maxj:94)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:24)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 102, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 133, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 99, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 100, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 101, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 103, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 132, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 105, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 106, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 108, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 109, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
PHOTON_NODE_DATA(SobelGaussianSolutionKernel, 107, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\nsobelgaussian.SobelGaussianSolutionManager.main(SobelGaussianSolutionManager.maxj:28)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int SobelGaussianSolution_has_errors(void)
{	return stored_has_error; }
const char* SobelGaussianSolution_get_errors(void)
{	return stored_error; }
void SobelGaussianSolution_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char SobelGaussianSolution_use_simulation[16];
static void SobelGaussianSolution_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(SobelGaussianSolution_use_simulation, 16, "SobelGau_%05ld_", pid);
}
static const char *SobelGaussianSolution_check_use_simulation(void)
{
	SobelGaussianSolution_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = SobelGaussianSolution_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int SobelGaussianSolution_simulation_launch = 0;
int SobelGaussianSolution_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = SobelGaussianSolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int SobelGaussianSolution_simulator_stop(void)
{
	const char *use_sim = SobelGaussianSolution_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void SobelGaussianSolution_static_init(void) 
{
	stored_maxfile = SobelGaussianSolution_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = SobelGaussianSolution_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = SobelGaussianSolution_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			SobelGaussianSolution_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void SobelGaussianSolution_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (SobelGaussianSolution_simulation_launch == 1) {
		int sim_stat = SobelGaussianSolution_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		SobelGaussianSolution_simulation_launch = 0;
	}
}

static int SobelGaussianSolution_get_pcie_alignment(void)
{
#ifdef SobelGaussianSolution_PCIE_ALIGNMENT
	return ((SobelGaussianSolution_PCIE_ALIGNMENT < 1) ? 16 : SobelGaussianSolution_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int SobelGaussianSolution_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = SobelGaussianSolution_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *SobelGaussianSolution_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = SobelGaussianSolution_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct SobelGaussianSolution_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} SobelGaussianSolution_callback_stream_t;

typedef struct SobelGaussianSolution_callback_data {
	SobelGaussianSolution_callback_stream_t stream[2]; 
	int count;
	int max_count;
} SobelGaussianSolution_callback_data_t;

static void SobelGaussianSolution_callback_internal(void *cb_data)
{
	SobelGaussianSolution_callback_data_t *data = (SobelGaussianSolution_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		SobelGaussianSolution_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* SobelGaussianSolution_convert_internal(
	max_file_t *maxfile,
	SobelGaussianSolution_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	SobelGaussianSolution_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(SobelGaussianSolution_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function SobelGaussianSolution_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &SobelGaussianSolution_callback_internal;
	}

	int32_t param_size = interface_actions->param_size;
	
	/* code for scalar SobelGaussianSolutionKernel.run_cycle_count */
	uint64_t ticks_SobelGaussianSolutionKernel = param_size;
	max_set_ticks(actions, "SobelGaussianSolutionKernel", param_size);
	CHECK_ERRORS;
	/* end of code for scalar SobelGaussianSolutionKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_size * 4);
	
	/* code for stream inImage */
	size_t instream_size_inImage = tmp_0;
	if (instream_size_inImage > 0) {
		const int32_t *stream_ptr = interface_actions->instream_inImage;
		if (use_callback && (1 == SobelGaussianSolution_check_aligned(interface_actions->instream_inImage))) {
			int32_t *aligned_instream_inImage = malloc(instream_size_inImage);
			if (aligned_instream_inImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'inImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_inImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_inImage;
			(&cb_data->stream[cb_data->count])->size        = instream_size_inImage;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_inImage, interface_actions->instream_inImage, instream_size_inImage);
			stream_ptr = aligned_instream_inImage;
		}
		max_queue_input(actions, "inImage", stream_ptr, instream_size_inImage);
		CHECK_ERRORS;
	}
	/* end of code for stream inImage */
	
	int64_t tmp_1 = (param_size * 4);
	
	/* code for stream outImage */
	size_t outstream_size_outImage = tmp_1;
	if (outstream_size_outImage > 0) {
		int32_t *stream_ptr = interface_actions->outstream_outImage;
		if (use_callback && (1 == SobelGaussianSolution_check_aligned(interface_actions->outstream_outImage))) {
			int32_t *aligned_outstream_outImage = malloc(outstream_size_outImage);
			if (aligned_outstream_outImage == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'outImage'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_outImage;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_outImage;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_outImage;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_outImage;
		}
		max_queue_output(actions, "outImage", stream_ptr, outstream_size_outImage);
		CHECK_ERRORS;
	}
	/* end of code for stream outImage */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void SobelGaussianSolution(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage)
{
	(void) pthread_once(&slic_bs_is_initialised, SobelGaussianSolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = SobelGaussianSolution_nonblock(param_size, instream_inImage, outstream_outImage);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *SobelGaussianSolution_nonblock(
	int32_t param_size,
	const int32_t *instream_inImage,
	int32_t *outstream_outImage)
{
	SobelGaussianSolution_actions_t interface_actions;
	interface_actions.param_size = param_size;
	interface_actions.instream_inImage = instream_inImage;
	interface_actions.outstream_outImage = outstream_outImage;
	(void) pthread_once(&slic_bs_is_initialised, SobelGaussianSolution_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = SobelGaussianSolution_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void SobelGaussianSolution_run(
	max_engine_t *engine,
	SobelGaussianSolution_actions_t *interface_actions)
{
	max_run_t *run = SobelGaussianSolution_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *SobelGaussianSolution_run_nonblock(
	max_engine_t *engine,
	SobelGaussianSolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = SobelGaussianSolution_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void SobelGaussianSolution_run_group(max_group_t *group, SobelGaussianSolution_actions_t *interface_actions)
{
	max_run_t *run = SobelGaussianSolution_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussianSolution_run_group_nonblock(max_group_t *group, SobelGaussianSolution_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = SobelGaussianSolution_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void SobelGaussianSolution_run_array(max_engarray_t *engarray, SobelGaussianSolution_actions_t *interface_actions[])
{
	max_run_t *run = SobelGaussianSolution_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *SobelGaussianSolution_run_array_nonblock(max_engarray_t *engarray, SobelGaussianSolution_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = SobelGaussianSolution_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* SobelGaussianSolution_convert(max_file_t *maxfile, SobelGaussianSolution_actions_t *interface_actions)
{
	return SobelGaussianSolution_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int32_t, size, param_size)	
SLIC_SET_TICKS(SobelGaussianSolutionKernel, param_size)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_size * 4);)	
SLIC_STREAM(inImage, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_size * 4);)	
SLIC_STREAM(outImage, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IlNvYmVsR2F1c3NpYW5Tb2x1
dGlvbi5oIiBuYW1lPSJTb2JlbEdhdXNzaWFuU29sdXRpb24iPjxjb25zdGFudCBuYW1lPSJQQ0lF
X0FMSUdOTUVOVCIgdHlwZT0ibG9uZyIgdmFsdWU9IjE2Ii8+PGVuZ2luZW1vZGUgbmFtZT0iZGVm
YXVsdCI+PGZ1bmN0aW9uIG5hbWU9IlNvYmVsR2F1c3NpYW5Tb2x1dGlvbiIgcmV0dXJuLXZhbHVl
PSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7c2l6ZSZxdW90
Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX3NpemUiIHR5cGU9ImludDMyX3QiLz48
YXJyYXkgZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fc2l6ZSAqIDQp
IGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1faW5JbWFnZSIgc2l6ZT0i
KHBhcmFtX3NpemUgKiA0KSIgdHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJpbnQzMl90Ij48ZGltZW5z
aW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9w
ZXJhdG9yPSIvIiB2YWx1ZT0iKChwYXJhbV9zaXplICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48
bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIocGFyYW1fc2l6ZSAqIDQpIj48
dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9zaXplIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjQiLz48
L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0
Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lv
bj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUgc3RyZWFtIHNob3VsZCBiZSBvZiBzaXplIChwYXJh
bV9zaXplICogNCkgYnl0ZXMuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX291
dEltYWdlIiBzaXplPSIocGFyYW1fc2l6ZSAqIDQpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9Imlu
dDMyX3QiPjxkaW1lbnNpb24gaW5kZXg9IjAiPjxsZW5ndGg+PGZ1bmN0aW9uQ2FsbD48bnVtQmlu
YXJ5T3BlcmF0b3Igb3BlcmF0b3I9Ii8iIHZhbHVlPSIoKHBhcmFtX3NpemUgKiA0KSAvIDQpIj48
ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKiIgdmFsdWU9IihwYXJh
bV9zaXplICogNCkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFtX3NpemUiLz48Y29uc3RhbnRWYWx1
ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50
VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVu
Z3RoPjwvZGltZW5zaW9uPjwvYXJyYXk+PC9mdW5jdGlvbj48L2VuZ2luZW1vZGU+PC9tYXhmaWxl
Pg==
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBTb2JlbEdhdXNzaWFuU29sdXRpb25faGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBz
dG9yZWRfaGFzX2Vycm9yOyB9CmNvbnN0IGNoYXIqIFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9nZXRf
ZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9lcnJvcjsgfQp2b2lkIFNvYmVsR2F1c3NpYW5T
b2x1dGlvbl9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVk
X2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBTb2Jl
bEdhdXNzaWFuU29sdXRpb25fdXNlX3NpbXVsYXRpb25bMTZdOwpzdGF0aWMgdm9pZCBTb2JlbEdh
dXNzaWFuU29sdXRpb25fZGVmX3VzZV9zaW11bGF0aW9uKHZvaWQpCnsKCWxvbmcgcGlkID0gKChs
b25nKSBnZXRwaWQoKSkgJSAxMDAwMDA7CglzbnByaW50ZihTb2JlbEdhdXNzaWFuU29sdXRpb25f
dXNlX3NpbXVsYXRpb24sIDE2LCAiU29iZWxHYXVfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29u
c3QgY2hhciAqU29iZWxHYXVzc2lhblNvbHV0aW9uX2NoZWNrX3VzZV9zaW11bGF0aW9uKHZvaWQp
CnsKCVNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9kZWZfdXNlX3NpbXVsYXRpb24oKTsKCWNvbnN0IGNo
YXIgKnVzZV9zaW0gPSBtYXhfY29uZmlnX2dldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxB
VElPTik7CglpZiAodXNlX3NpbSA9PSBOVUxMKSB7CgkJdXNlX3NpbSA9IFNvYmVsR2F1c3NpYW5T
b2x1dGlvbl91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJ
R19VU0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGlj
IGludCBTb2JlbEdhdXNzaWFuU29sdXRpb25fc2ltdWxhdGlvbl9sYXVuY2ggPSAwOwppbnQgU29i
ZWxHYXVzc2lhblNvbHV0aW9uX3NpbXVsYXRvcl9zdGFydCh2b2lkKQp7CglpbnQgcmV0dmFsID0g
MDsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBTb2JlbEdhdXNzaWFuU29sdXRpb25fY2hlY2tfdXNl
X3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQ
QVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYMzQyNEEg
LVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1
ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFp
bGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVm
Zik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9
IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0
cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwg
IkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9Cglw
Y2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQgU29iZWxHYXVzc2lhblNvbHV0
aW9uX3NpbXVsYXRvcl9zdG9wKHZvaWQpCnsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBTb2JlbEdh
dXNzaWFuU29sdXRpb25fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsK
CXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2lt
IC1kIDEgLW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgc3RvcCIsIHVzZV9zaW0pOwoJRklM
RSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJ
c3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVm
ZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1
ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQg
c2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAq
LwoJCTsKCX0KCXBjbG9zZShwaXBlX2ZwKTsKCXJldHVybiAwOwp9CgpzdGF0aWMgdm9pZCBTb2Jl
bEdhdXNzaWFuU29sdXRpb25fc3RhdGljX2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0g
U29iZWxHYXVzc2lhblNvbHV0aW9uX2luaXQoKTsKCWlmIChzdG9yZWRfbWF4ZmlsZSA9PSBOVUxM
IHx8ICFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlzdG9yZWRfbWF4ZmlsZSA9
IE5VTEw7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZB
Q0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0
byBsb2FkIG1heGZpbGUiKTsgcmV0dXJuOyB9Cgl9CglpZighbWF4X29rKG1heF9nbG9iYWxfZXJy
b3JzKCkpKSB7CgkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UobWF4X2dsb2Jh
bF9lcnJvcnMoKSkpOwoJCXJldHVybjsKCX0KCWlmKCFtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpCgkJbWF4X2Vycm9yc19tb2Rl
KHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMsIDApOwoJdGltZV90IHRpbWVvdXRfcHJldmlvdXMgPSBt
YXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCAzMCk7Cgljb25zdCBjaGFyICp1c2Vfc2lt
ID0gU29iZWxHYXVzc2lhblNvbHV0aW9uX2NoZWNrX3VzZV9zaW11bGF0aW9uKCk7CglpZiAobWF4
X3BpbmdfZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vfc2ltKSA9PSAwKSB7CgkJaW50IHNpbV9z
dGF0ID0gU29iZWxHYXVzc2lhblNvbHV0aW9uX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2lt
X3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkg
PT0gMSkpIHsKCQkJU29iZWxHYXVzc2lhblNvbHV0aW9uX3NpbXVsYXRpb25fbGF1bmNoID0gMTsK
CQl9IGVsc2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0
cnlpbmcgdG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFzdHJ1Y3R1cmUgYXV0b21hdGljYWxs
eS4iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhhdCAndXNlX3NpbXVsYXRpb249PHNp
bXVsYXRvcl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5b3VyIFNMaUMgY29uZmlndXJhdGlv
biIpOwoJCQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0aGUgYXNzb2NpYXRlZCBzaW11bGF0
ZWQgc3lzdGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9t
YXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfQoJfQoJc3Rv
cmVkX2VuZ2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAiKiIpOwoJaWYgKCFtYXhfb2so
c3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsKCQkJZnByaW50ZihzdGRl
cnIsICJcblVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcgbm93LlxuXG4iKTsKCQkJZmZs
dXNoKHN0ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yX2FuZF9mcmVl
KG1heF9lcnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9ycykpOwoJCQltYXhfZmlsZV9m
cmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47
CgkJfSAKCX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCB0aW1lb3V0X3ByZXZp
b3VzKTsKfQp2b2lkIFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9mcmVlKHZvaWQpCnsKCWlmIChzdG9y
ZWRfZW5naW5lICE9IE5VTEwpIHsKCQltYXhfdW5sb2FkKHN0b3JlZF9lbmdpbmUpOwoJCXN0b3Jl
ZF9lbmdpbmUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9tYXhmaWxlICE9IE5VTEwpIHsKCQltYXhf
ZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7Cgl9Cglp
ZiAoc3RvcmVkX2Vycm9yICE9IE5VTEwpIHsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJc3RvcmVk
X2Vycm9yID0gTlVMTDsKCX0KCWlmIChTb2JlbEdhdXNzaWFuU29sdXRpb25fc2ltdWxhdGlvbl9s
YXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9zaW11
bGF0b3Jfc3RvcCgpOwoJCWlmIChzaW1fc3RhdCAhPSAwICkgewoJCQlmcHJpbnRmKHN0ZGVyciwg
IkVycm9yIHN0b3BwaW5nIHNpbXVsYXRvci4iKTsKCQl9CgkJU29iZWxHYXVzc2lhblNvbHV0aW9u
X3NpbXVsYXRpb25fbGF1bmNoID0gMDsKCX0KfQoKc3RhdGljIGludCBTb2JlbEdhdXNzaWFuU29s
dXRpb25fZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIFNvYmVsR2F1c3NpYW5Tb2x1
dGlvbl9QQ0lFX0FMSUdOTUVOVAoJcmV0dXJuICgoU29iZWxHYXVzc2lhblNvbHV0aW9uX1BDSUVf
QUxJR05NRU5UIDwgMSkgPyAxNiA6IFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9QQ0lFX0FMSUdOTUVO
VCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IFNvYmVsR2F1c3NpYW5T
b2x1dGlvbl9jaGVja19hbGlnbmVkKGNvbnN0IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJfdCBwb2lu
dGVyID0gKHVpbnRwdHJfdCkgZGF0YTsKCWludCBhbGlnbm1lbnQgPSBTb2JlbEdhdXNzaWFuU29s
dXRpb25fZ2V0X3BjaWVfYWxpZ25tZW50KCk7CglyZXR1cm4gKHBvaW50ZXIgJSBhbGlnbm1lbnQp
ID8gMSA6IDA7Cn0KCnN0YXRpYyB2b2lkICpTb2JlbEdhdXNzaWFuU29sdXRpb25fbWFsbG9jX2Fs
aWduZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBT
b2JlbEdhdXNzaWFuU29sdXRpb25fZ2V0X3BjaWVfYWxpZ25tZW50KCk7Cglwb3NpeF9tZW1hbGln
bigmcHRyLCBhbGlnbm1lbnQsIHNpemUpOwoJcmV0dXJuIHB0cjsKfQoKCgovKi0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJmYWNlIGRlZmF1
bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0q
LwoKCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNULT5lcnJv
cnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNF
X0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJyb3JzX3Ry
YWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9y
c190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tfTlVMTChW
QUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29uZmlnX2dl
dF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnBy
aW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAiIiA6IHN0
b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0UpOyByZXR1
cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9jYWxsYmFj
a19zdHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNp
emVfdCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gU29iZWxHYXVzc2lhblNvbHV0aW9u
X2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgU29iZWxHYXVzc2lhblNvbHV0aW9u
X2NhbGxiYWNrX2RhdGEgewoJU29iZWxHYXVzc2lhblNvbHV0aW9uX2NhbGxiYWNrX3N0cmVhbV90
IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7CglpbnQgbWF4X2NvdW50Owp9IFNvYmVsR2F1c3NpYW5T
b2x1dGlvbl9jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBTb2JlbEdhdXNzaWFuU29sdXRp
b25fY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJU29iZWxHYXVzc2lhblNvbHV0
aW9uX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChTb2JlbEdhdXNzaWFuU29sdXRpb25fY2FsbGJh
Y2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsg
aSsrICkgewoJCVNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZk
YXRhLT5zdHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJ
CW1lbWNweShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVl
KHMtPmFsaWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190
KiBTb2JlbEdhdXNzaWFuU29sdXRpb25fY29udmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1h
eGZpbGUsCglTb2JlbEdhdXNzaWFuU29sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9u
cywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCop
LAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhf
YWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4g
TlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkg
eyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsg
cmV0dXJuIE5VTEw7IH0gCgoJU29iZWxHYXVzc2lhblNvbHV0aW9uX2NhbGxiYWNrX2RhdGFfdCAq
Y2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVM
TCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxiYWNrKSB7CgkJY2Jf
ZGF0YSA9IG1hbGxvYyhzaXplb2YoU29iZWxHYXVzc2lhblNvbHV0aW9uX2NhbGxiYWNrX2RhdGFf
dCkpOwoJCWlmIChjYl9kYXRhID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFibGUg
dG8gYWxsb2NhdGUgbWVtb3J5IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlvbiBT
b2JlbEdhdXNzaWFuU29sdXRpb25fY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxM
OwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7
CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAm
U29iZWxHYXVzc2lhblNvbHV0aW9uX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCWludDMyX3QgcGFy
YW1fc2l6ZSA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9zaXplOwoJCgkvKiBjb2RlIGZvciBz
Y2FsYXIgU29iZWxHYXVzc2lhblNvbHV0aW9uS2VybmVsLnJ1bl9jeWNsZV9jb3VudCAqLwoJdWlu
dDY0X3QgdGlja3NfU29iZWxHYXVzc2lhblNvbHV0aW9uS2VybmVsID0gcGFyYW1fc2l6ZTsKCW1h
eF9zZXRfdGlja3MoYWN0aW9ucywgIlNvYmVsR2F1c3NpYW5Tb2x1dGlvbktlcm5lbCIsIHBhcmFt
X3NpemUpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBTb2JlbEdh
dXNzaWFuU29sdXRpb25LZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJaW50NjRfdCB0bXBfMCA9
IChwYXJhbV9zaXplICogNCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBpbkltYWdlICovCglzaXpl
X3QgaW5zdHJlYW1fc2l6ZV9pbkltYWdlID0gdG1wXzA7CglpZiAoaW5zdHJlYW1fc2l6ZV9pbklt
YWdlID4gMCkgewoJCWNvbnN0IGludDMyX3QgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9u
cy0+aW5zdHJlYW1faW5JbWFnZTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IFNvYmVsR2F1
c3NpYW5Tb2x1dGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9p
bkltYWdlKSkpIHsKCQkJaW50MzJfdCAqYWxpZ25lZF9pbnN0cmVhbV9pbkltYWdlID0gbWFsbG9j
KGluc3RyZWFtX3NpemVfaW5JbWFnZSk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2Ug
PT0gTlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19G
SUxFX18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkg
Zm9yIHN0cmVhbSAnaW5JbWFnZSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50
ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2luSW1hZ2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2Ni
X2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFt
X2luSW1hZ2U7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAg
ICAgID0gaW5zdHJlYW1fc2l6ZV9pbkltYWdlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRh
LT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1l
bWNweShhbGlnbmVkX2luc3RyZWFtX2luSW1hZ2UsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVh
bV9pbkltYWdlLCBpbnN0cmVhbV9zaXplX2luSW1hZ2UpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25l
ZF9pbnN0cmVhbV9pbkltYWdlOwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgImluSW1h
Z2UiLCBzdHJlYW1fcHRyLCBpbnN0cmVhbV9zaXplX2luSW1hZ2UpOwoJCUNIRUNLX0VSUk9SUzsK
CX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gaW5JbWFnZSAqLwoJCglpbnQ2NF90IHRtcF8x
ID0gKHBhcmFtX3NpemUgKiA0KTsKCQoJLyogY29kZSBmb3Igc3RyZWFtIG91dEltYWdlICovCglz
aXplX3Qgb3V0c3RyZWFtX3NpemVfb3V0SW1hZ2UgPSB0bXBfMTsKCWlmIChvdXRzdHJlYW1fc2l6
ZV9vdXRJbWFnZSA+IDApIHsKCQlpbnQzMl90ICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlv
bnMtPm91dHN0cmVhbV9vdXRJbWFnZTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IFNvYmVs
R2F1c3NpYW5Tb2x1dGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJl
YW1fb3V0SW1hZ2UpKSkgewoJCQlpbnQzMl90ICphbGlnbmVkX291dHN0cmVhbV9vdXRJbWFnZSA9
IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV9vdXRJbWFnZSk7CgkJCWlmIChhbGlnbmVkX291dHN0cmVh
bV9vdXRJbWFnZSA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+
ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGln
bmVkIG1lbW9yeSBmb3Igc3RyZWFtICdvdXRJbWFnZSciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJ
fQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1
aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9vdXRJbWFnZTsKCQkJKCZjYl9k
YXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFs
aWduZWRfb3V0c3RyZWFtX291dEltYWdlOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT5zaXplICAgICAgICA9IG91dHN0cmVhbV9zaXplX291dEltYWdlOwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDE7CgkJCWNiX2RhdGEt
PmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX291dHN0cmVhbV9vdXRJbWFnZTsK
CQl9CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAib3V0SW1hZ2UiLCBzdHJlYW1fcHRyLCBv
dXRzdHJlYW1fc2l6ZV9vdXRJbWFnZSk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNv
ZGUgZm9yIHN0cmVhbSBvdXRJbWFnZSAqLwoJCglpZiAodXNlX2NhbGxiYWNrICYmIGNiX2RhdGEt
PmNvdW50ID09IDApIHsKCQkqY2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJKmNhbGxiYWNrX2Z1bmMg
PSBOVUxMOwoJCWZyZWUoY2JfZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9uczsKI3VuZGVmIENIRUNL
X0VSUk9SUwp9Cgp2b2lkIFNvYmVsR2F1c3NpYW5Tb2x1dGlvbigKCWludDMyX3QgcGFyYW1fc2l6
ZSwKCWNvbnN0IGludDMyX3QgKmluc3RyZWFtX2luSW1hZ2UsCglpbnQzMl90ICpvdXRzdHJlYW1f
b3V0SW1hZ2UpCnsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQs
IFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9zdGF0aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9t
YXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsICk7CgltYXhfcnVuX3QgKnJ1biA9IFNv
YmVsR2F1c3NpYW5Tb2x1dGlvbl9ub25ibG9jayhwYXJhbV9zaXplLCBpbnN0cmVhbV9pbkltYWdl
LCBvdXRzdHJlYW1fb3V0SW1hZ2UpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFj
dGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpTb2JlbEdhdXNzaWFuU29s
dXRpb25fbm9uYmxvY2soCglpbnQzMl90IHBhcmFtX3NpemUsCgljb25zdCBpbnQzMl90ICppbnN0
cmVhbV9pbkltYWdlLAoJaW50MzJfdCAqb3V0c3RyZWFtX291dEltYWdlKQp7CglTb2JlbEdhdXNz
aWFuU29sdXRpb25fYWN0aW9uc190IGludGVyZmFjZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlv
bnMucGFyYW1fc2l6ZSA9IHBhcmFtX3NpemU7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9p
bkltYWdlID0gaW5zdHJlYW1faW5JbWFnZTsKCWludGVyZmFjZV9hY3Rpb25zLm91dHN0cmVhbV9v
dXRJbWFnZSA9IG91dHN0cmVhbV9vdXRJbWFnZTsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNf
YnNfaXNfaW5pdGlhbGlzZWQsIFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9zdGF0aWNfaW5pdCk7CglD
SEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIsIE5VTEwp
OwoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAg
ID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBTb2JlbEdhdXNzaWFuU29sdXRpb25f
Y29udmVydF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAm
Y2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxk
IGFjdGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19T
VChhY3Rpb25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsK
CW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5f
bm9uYmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9y
dW5fbm9uYmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9k
YXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7
CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlv
bnMpOwoJcmV0dXJuIHJ1bjsKfQoKdm9pZCBTb2JlbEdhdXNzaWFuU29sdXRpb25fcnVuKAoJbWF4
X2VuZ2luZV90ICplbmdpbmUsCglTb2JlbEdhdXNzaWFuU29sdXRpb25fYWN0aW9uc190ICppbnRl
cmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBTb2JlbEdhdXNzaWFuU29sdXRpb25f
cnVuX25vbmJsb2NrKGVuZ2luZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4s
ICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90
ICpTb2JlbEdhdXNzaWFuU29sdXRpb25fcnVuX25vbmJsb2NrKAoJbWF4X2VuZ2luZV90ICplbmdp
bmUsCglTb2JlbEdhdXNzaWFuU29sdXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykK
ewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7
IAoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAg
ID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBTb2JlbEdhdXNzaWFuU29sdXRpb25f
Y29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMs
ICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0byBidWlsZCBhY3Rpb25z
IiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19FUlJPUlNfU1QoYWN0aW9u
cywgTlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4g
PSBtYXhfcnVuX25vbmJsb2NrKGVuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1h
eF9ydW5fbm9uYmxvY2tfd2l0aF9jYihlbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEp
OwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCW1h
eF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBH
cm91cCBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZh
dWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtp
bixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlvbnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFj
dGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9p
ZCBTb2JlbEdhdXNzaWFuU29sdXRpb25fcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgU29i
ZWxHYXVzc2lhblNvbHV0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9y
dW5fdCAqcnVuID0gU29iZWxHYXVzc2lhblNvbHV0aW9uX3J1bl9ncm91cF9ub25ibG9jayhncm91
cCwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFj
dGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFk
dmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2Rl
ZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMgdG8gcnVuIG9uIHRoZSBmaXJz
dCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5Lgog
KiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2VkIHdpdGggOjptYXhfd2FpdC4g
CiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHByb2hpYml0ZWQgd2l0aCBub24t
YmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUgOjptYXhfcnVuX2dyb3VwX25v
bmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRpb24uCiAqCiAqIFxwYXJhbSBb
aW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMg
QWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0
dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5f
dCAqU29iZWxHYXVzc2lhblNvbHV0aW9uX3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3JvdXBfdCAq
Z3JvdXAsIFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25z
KQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7
CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gU29iZWxHYXVzc2lhblNvbHV0aW9uX2NvbnZlcnRf
aW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYo
YWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3Jz
KSkgcmV0dXJuIE5VTEw7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9
IG1heF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3JvdXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJl
ZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZh
bmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICog
XHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMgdG8gdXNlLgogKiBccGFy
YW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVu
LgogKgogKiBSdW4gdGhlIGFycmF5IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMu
ICBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zCiAqIG11c3QgbWF0Y2ggdGhlIHNpemUg
b2YgZW5nYXJyYXkuCiAqLwp2b2lkIFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9ydW5fYXJyYXkobWF4
X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBTb2JlbEdhdXNzaWFuU29sdXRpb25fYWN0aW9uc190ICpp
bnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfcnVuX3QgKnJ1biA9IFNvYmVsR2F1c3NpYW5Tb2x1
dGlvbl9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGludGVyZmFjZV9hY3Rpb25zKTsKCUNI
RUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7
Cn0KCgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5n
IGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNlICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxl
IHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5k
IHJldHVybiBpbW1lZGlhdGVseS4KICogVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBt
dXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4g
Y2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBu
b3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRl
ZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgogKgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUg
YXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25z
IFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUg
ZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9y
LgogKi8KbWF4X3J1bl90ICpTb2JlbEdhdXNzaWFuU29sdXRpb25fcnVuX2FycmF5X25vbmJsb2Nr
KG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgU29iZWxHYXVzc2lhblNvbHV0aW9uX2FjdGlvbnNf
dCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9lbmdh
cnJheV9nZXRfbWF4X2ZpbGUoZW5nYXJyYXksIDApOwoJaW50IGk7CgltYXhfYWN0YXJyYXlfdCAq
YWN0YXJyYXkgPSBtYXhfYWN0YXJyYXlfaW5pdChtYXhmaWxlLCBlbmdhcnJheS0+c2l6ZSk7Cglp
ZiAoYWN0YXJyYXkgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgltYXhfYWN0aW9uc190ICoqYXJyX2Fj
dGlvbnMgPSBtYWxsb2MoZW5nYXJyYXktPnNpemUgKiBzaXplb2YobWF4X2FjdGlvbnNfdCopKTsK
CWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplOyBpKysgKSB7CgkJbWF4X2FjdGlvbnNf
dCAqYWN0aW9ucyA9IFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9jb252ZXJ0X2ludGVybmFsKG1heGZp
bGUsIGludGVyZmFjZV9hY3Rpb25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9
PSBOVUxMKSByZXR1cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3Nl
dF9hY3Rpb24oYWN0YXJyYXksIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhf
cnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkg
PCBhY3RhcnJheS0+c2l6ZSA7IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tp
XSk7IH0KCW1heF9hY3RhcnJheV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJ
cmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNl
IGFjdGlvbiBzdHJ1Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3Ry
dWN0LgogKgogKiBOb3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9u
IHVzZWQgYnkgb3RoZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBc
cGFyYW0gW2luXSBtYXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50
ZXJmYWNlX2FjdGlvbnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICog
XHJldHVybiBUaGUgZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4g
Y2FzZSBvZiBlcnJvci4KICovCm1heF9hY3Rpb25zX3QqIFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9j
b252ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIFNvYmVsR2F1c3NpYW5Tb2x1dGlvbl9hY3Rpb25z
X3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CglyZXR1cm4gU29iZWxHYXVzc2lhblNvbHV0aW9uX2Nv
bnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEwsIE5VTEwp
Owp9CgojdW5kZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoK
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 95, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 141, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 140, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 138, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 137, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 112, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 113, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 114, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 115, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 128, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 70, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 99, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 100, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 101, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 105, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 106, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(SobelGaussianSolutionKernel, 107, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302d021500888df692276e4665c0b9aa926cde34e62d68dfeb02144c41f9e05fc2be3859cc1479644702347243dc86")
#endif

