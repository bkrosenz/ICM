digraph manager_compiler_graph {
SobelGaussianSolutionKernel[shape=plaintext, label=<<TABLE  BORDER="1" CELLPADDING="1" CELLSPACING="1"><TR><TD BGCOLOR="white" BORDER="0" PORT="inputs" ROWSPAN="1" COLSPAN="1"><TABLE  BORDER="1" CELLPADDING="1" CELLSPACING="4"><TR><TD BGCOLOR="white" BORDER="1" PORT="inImage" ROWSPAN="1" COLSPAN="1">inImage<BR/>clk=STREAM (100MHz)<BR/>width=32<BR/>PULL el=1 ael=2</TD></TR></TABLE></TD></TR><TR><TD BGCOLOR="white" BORDER="0" PORT="node_info" ROWSPAN="1" COLSPAN="1">Kernel : SobelGaussianSolutionKernel</TD></TR><TR><TD BGCOLOR="white" BORDER="0" PORT="outputs" ROWSPAN="1" COLSPAN="1"><TABLE  BORDER="1" CELLPADDING="1" CELLSPACING="4"><TR><TD BGCOLOR="white" BORDER="1" PORT="outImage" ROWSPAN="1" COLSPAN="1">outImage<BR/>clk=STREAM (100MHz)<BR/>width=32<BR/>PUSH 5</TD></TR></TABLE></TD></TR></TABLE>>];
SobelGaussianSolutionKernel_assign -> outImage_assign[color=green headport="assignment_2" tailport="assignment_6"];
SobelGaussianSolutionKernel_assign[shape=plaintext, label=<<TABLE  BORDER="0" CELLPADDING="0" CELLSPACING="0"><TR><TD BGCOLOR="green" BORDER="1" PORT="assignment_6" ROWSPAN="1" COLSPAN="1">3200 : width_in_inImage=32 width_out_outImage=32 clk=STREAM </TD></TR></TABLE>>];
SobelGaussianSolutionKernel_assign -> SobelGaussianSolutionKernel[color=gray];
inImage[shape=plaintext, label=<<TABLE  BORDER="1" CELLPADDING="1" CELLSPACING="1"><TR><TD BGCOLOR="white" BORDER="0" PORT="node_info" ROWSPAN="1" COLSPAN="1">PCIe_From_Host_fwd : inImage</TD></TR><TR><TD BGCOLOR="white" BORDER="0" PORT="outputs" ROWSPAN="1" COLSPAN="1"><TABLE  BORDER="1" CELLPADDING="1" CELLSPACING="4"><TR><TD BGCOLOR="white" BORDER="1" PORT="inImage" ROWSPAN="1" COLSPAN="1">inImage<BR/>clk=STREAM (100MHz)<BR/>width=128<BR/>PULL el=1 ael=8</TD></TR></TABLE></TD></TR></TABLE>>];
inImage_assign -> SobelGaussianSolutionKernel_assign[color=green headport="assignment_6" tailport="assignment_9"];
inImage_assign[shape=plaintext, label=<<TABLE  BORDER="0" CELLPADDING="0" CELLSPACING="0"><TR><TD BGCOLOR="green" BORDER="1" PORT="assignment_9" ROWSPAN="1" COLSPAN="1">16000 : width=128 clk=STREAM </TD></TR></TABLE>>];
inImage_assign -> inImage[color=gray];
outImage[shape=plaintext, label=<<TABLE  BORDER="1" CELLPADDING="1" CELLSPACING="1"><TR><TD BGCOLOR="white" BORDER="0" PORT="inputs" ROWSPAN="1" COLSPAN="1"><TABLE  BORDER="1" CELLPADDING="1" CELLSPACING="4"><TR><TD BGCOLOR="white" BORDER="1" PORT="outImage" ROWSPAN="1" COLSPAN="1">outImage<BR/>clk=STREAM (100MHz)<BR/>width=128<BR/>PUSH 64</TD></TR></TABLE></TD></TR><TR><TD BGCOLOR="white" BORDER="0" PORT="node_info" ROWSPAN="1" COLSPAN="1">PCIe_To_Host_fwd : outImage</TD></TR></TABLE>>];
outImage_assign[shape=plaintext, label=<<TABLE  BORDER="0" CELLPADDING="0" CELLSPACING="0"><TR><TD BGCOLOR="green" BORDER="1" PORT="assignment_2" ROWSPAN="1" COLSPAN="1">0 : width=128 clk=STREAM </TD></TR></TABLE>>];
outImage_assign -> outImage[color=gray];
inImage -> SobelGaussianSolutionKernel [headport="inImage" tailport="inImage" label="{D{data:1}}"]
SobelGaussianSolutionKernel -> outImage [headport="outImage" tailport="outImage" label="{D{data:1}}"]
}
