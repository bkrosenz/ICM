/**
 * Document: MaxCompiler Training (maxcompiler-training.pdf)
 * Chapter: 2
 * Exercise Solution: 3
 * Summary:
 * 	 Kernel that performs a 7x7 Gaussian blur to remove minor detail
 *   in the image then performs 3x3 Sobel edge detection.
 *   The Sobel coefficients are declared statically in a 3x3 array.
 *   The Gaussian coefficients are stored in 7-element 1D array and
 *   are applied in one dimension, then the other.
 *   At the border of the image, the output is set to 0 . The 3-pixel
 *   boundary condition of the Gaussian blur is not taken into account
 *   for simplicity.
 */
package sobelgaussian;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;

class SobelGaussianSolutionKernel extends Kernel {
   private final double beta = 1.5; // interaction parameter
    private final double invVar = 5.0; // 1/(2*variance) of gaussian noise, since div is more costly than mult
    private final int nColors = 2;
    static final DFEType floatType = dfeFloat(8, 24);
    static final DFEType intType = dfeUInt(32);

    protected SobelGaussianSolutionKernel(KernelParameters parameters) {
	    super(parameters);

		int height = 256, width = 256, blockSize=1;

		DFEVar inImage = io.input("inImage", dfeInt(32));

		DFEVar countX = constant.var(0);

		for (int x = 1; x <= blockSize; x++) {
			DFEVar preAdd = constant.var(0);
			preAdd = preAdd + stream.offset(inImage, x);
			preAdd = preAdd + stream.offset(inImage, -x);
			countX = countX + preAdd; //(preAdd * GaussianCoeffs[x + 3] / 1000);
		}
		//		countX = countX + inImage; //(inImage * GaussianCoeffs[3] / 1000);

		DFEVar countY = constant.var(0);

		for (int y = 1; y <= blockSize; y++) {
			DFEVar preAdd = constant.var(0);
			preAdd = preAdd + stream.offset(countX, y * width);
			preAdd = preAdd + stream.offset(countX, -y * width);
			countY = countY + preAdd;//(preAdd * GaussianCoeffs[y + 3] / 1000);
		}

		countY = countY + countX;// * GaussianCoeffs[3] / 1000);

		DFEVar window[][] = new DFEVar[blockSize*2+1][blockSize*2+1]; // x, y

		for (int x = -blockSize; x <= blockSize; x++)
			for (int y = -blockSize; y <= blockSize; y++)
				window[x + 1][y + 1] = stream.offset(countY, y * width + x);

		DFEVar GxSum = constant.var(0);
		DFEVar GySum = constant.var(0);
		DFEVar black = countY;
		
		for (int x = 0; x < blockSize*2+1; x++) {
			for (int y = 0; y < blockSize*2+1; y++) {
			    GxSum = GxSum + window[x][y];
			    GySum = GySum + window[x][y];
			}
		}

		DFEVar absGxSum = GxSum >= 0 ? GxSum : -GxSum;
		DFEVar absGySum = GySum >= 0 ? GySum : -GySum;

		//		DFEVar result = constant.var(dfeInt(32),0); // argmax_i

		DFEVar residual = inImage; // TODO: change to inImage-i*step, or replace iw with something like priors.read(i);
		// posteriors:
		DFEVar post_black = residual * residual * invVar - beta * black;
		DFEVar post_white = residual * (1-residual) * invVar - beta * (8-black); // 8 is neighborhood size
		DFEVar result = post_black < post_white ? constant.var(dfeInt(32),255) : 0; // can only multiplex on 2 streams or 1 stream and an int

		//		DFEVar result = absGxSum + absGySum;
		CounterChain chain = control.count.makeCounterChainMoreBits();
		DFEVar y = chain.addCounter(height, 1);
		DFEVar x = chain.addCounter(width, 1);

		result = ((x > 0 & x < width - 1) & (y > 0 & y < height - 1)) ? result
			: 0;

		io.output("outImage", result, result.getType());
	}
}
