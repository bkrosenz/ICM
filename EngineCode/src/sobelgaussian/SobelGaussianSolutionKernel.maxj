/**
 * Document: MaxCompiler Training (maxcompiler-training.pdf)
 * Chapter: 2
 * Exercise Solution: 3
 * Summary:
 * 	 Kernel that performs a 7x7 Gaussian blur to remove minor detail
 *   in the image then performs 3x3 Sobel edge detection.
 *   The Sobel coefficients are declared statically in a 3x3 array.
 *   The Gaussian coefficients are stored in 7-element 1D array and
 *   are applied in one dimension, then the other.
 *   At the border of the image, the output is set to 0 . The 3-pixel
 *   boundary condition of the Gaussian blur is not taken into account
 *   for simplicity.
 */
package sobelgaussian;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;

class SobelGaussianSolutionKernel extends Kernel {
   private final double beta = 1.5; // interaction parameter
    private final double invVar = 0.5; // 1/(2*variance) of gaussian noise, assuming noise is ~ N(0,1)
    static final DFEType floatType = dfeFloat(8, 24);
    static final DFEType intType = dfeUInt(32);

    protected SobelGaussianSolutionKernel(KernelParameters parameters) {
	    super(parameters);

		int height = 256, width = 256, blockSize=1;
		int neighborhoodSize = (2*blockSize+1)*(2*blockSize+1) - 1;
		
		DFEVar inImage = io.input("inImage", intType);

		DFEVar prior = io.input("prior", floatType);

		DFEVar countX = constant.var(0);

		for (int x = 1; x <= blockSize; x++) {
			DFEVar preAdd = constant.var(0);
			preAdd = preAdd + stream.offset(inImage, x);
			preAdd = preAdd + stream.offset(inImage, -x);
			countX = countX + preAdd; //(preAdd * GaussianCoeffs[x + 3] / 1000);
		}

		DFEVar countWhite = constant.var(0);

		for (int y = 1; y <= blockSize; y++) {
			DFEVar preAdd = constant.var(0);
			preAdd = preAdd + stream.offset(countX, y * width);
			preAdd = preAdd + stream.offset(countX, -y * width);
			countWhite = countWhite + preAdd;//(preAdd * GaussianCoeffs[y + 3] / 1000);
		}

		countWhite = countWhite + countX;// * GaussianCoeffs[3] / 1000);

		// DFEVar window[][] = new DFEVar[blockSize*2+1][blockSize*2+1]; // x, y
		// for (int x = -blockSize; x <= blockSize; x++)
		// 	for (int y = -blockSize; y <= blockSize; y++)
		// 		window[x + 1][y + 1] = stream.offset(countWhite, y * width + x);

		// DFEVar absGxSum = GxSum >= 0 ? GxSum : -GxSum;
		// DFEVar absGySum = GySum >= 0 ? GySum : -GySum;

		//		DFEVar result = constant.var(dfeInt(32),0); // argmax_i

		// prior = prior of being white
		DFEVar residW = inImage.cast(floatType)-prior;
		DFEVar residB = inImage.cast(floatType)-1+prior;
		DFEVar post_white = residW * residW * invVar - beta * countWhite;
		DFEVar post_black = residB * residB * invVar - beta * (neighborhoodSize-countWhite);
		DFEVar result = post_black < post_white ? constant.var(intType,255) : 0; // can only multiplex on 2 streams or 1 stream and an int

		//		DFEVar result = absGxSum + absGySum;
		CounterChain chain = control.count.makeCounterChainMoreBits();
		DFEVar y = chain.addCounter(height, 1);
		DFEVar x = chain.addCounter(width, 1);

		result = ((x > 0 & x < width - 1) & (y > 0 & y < height - 1)) ? result
			: 0;

		io.output("outImage", result, result.getType());
	}
}
